Vue学习总结
1 学习目标
1.1 Vue框架的学习
1.2 针对重要的几个知识点进行深入学习
1.3 文档输出
2 Vue框架简介
2.1 框架起源
        Evan You（尤雨溪） 在google工作时，使用Angular API 设计较为繁琐。发现用户界面完全可以用嵌套的组件树来描述，而一个组件恰恰可以对应MVVM中的ViewModel，于是决定将数据绑定实验改进成一个真正的开源项目，其核心思想便是 “数据驱动的组件系统”。
2.2 框架特点
         Vue——渐进式JavaScript 框架
（1）渐进式框架的理解：渐进，一步一步，不是必须一竿子把所有东西都用上。没有强主张，比如：在原来系统上做组件，做开发框架，做视图用。
（2）易用：具备html，css，js基础即可，入门门槛低。
         灵活：同Angular相比，Vue.js的API中没有module、controller、scope、factory、service等概念，一切都是以“ViewModel 实例”为基本单位。作者开发vue的初衷也是如此。
        性能：Vue2比Angular2更快。参考第三方测试：http://stefankrause.net/js-frameworks-benchmark4/webdriver-ts/table.html
2.3 框架概述
（1）MVVM框架（Model-View-ViewModel）：
        使用Vue的过程就是定义MVVM各个组成部分的过程：①定义View②定义Model ③创建Vue实例或ViewModel，用于连接View和Model。
1.	<!DOCTYPE html>  
2.	<html lang="en">  
3.	<head>  
4.	    <meta charset="UTF-8">  
5.	    <title>MVVM</title>  
6.	    <script src = "js/vue.js"></script>  
7.	</head>  
8.	<body>  
9.	    <!--这是View-->  
10.	    <div id="app">  
11.	        {{ message }}  
12.	    </div>  
13.	</body>  
14.	  
15.	<script>  
16.	//这是Model    
17.	var exampleData = {  
18.	    message: 'Hello World!'  
19.	}  
20.	//创建一个Vue实例或"ViewModel"  
21.	//它连接View与Model
22.	//通过创建Vue的根实例来启动vue.js应用。    
23.	new Vue({   
24.	    //表示该Vue挂载到<div id="app">...</div>元素  
25.	    //不能挂载到<html><body>元素上  
26.	    el: '#app', //el属性指向View  
27.	    data: exampleData //data属性指向Model    
28.	})  
29.	</script>  
30.	  
31.	</html>
每个 Vue.js 应用都是通过构造函数 Vue 创建一个 Vue 的根实例启动的；
其中el: ‘#app’ ，表示该Vue实例挂载到<div id="app">...</div>元素，注意不能挂载到<html><body>元素上 。 
（2）以数据驱动和组件化思想构建： 
       组件可以扩展HTML元素，封装可重用的代码，Vue.js 的目标是通过尽可能简单的 API 实现响应的数据绑定和组合的视图组件。
      数据驱动的理解：不需要操作DOM。
2.4 框架对比
（1）同Angular相比：
        Angular数据观测采用脏检查机制（dirty checking），作用域内的每一次变化会使所有 watcher 都要重新计算，对于所有的数据和视图的绑定关系进行检查，所以当 watcher 越来越多时会变得越来越慢。
        Vue使用ES5 提供的 Object.defineProperty() 方法，监控对数据的操作，基于依赖追踪的观察系统并且异步队列更新，所有的数据变化都是独立触发，除非它们之间有明确的依赖关系。
（2）与React有类似的功能：
        虚拟DOM；
        提供响应式、组件化的视图组件；
        保持对核心库的专注，像路由、全局状态管理交给相关库（vue-router等）处理。
2.5 生命周期
生明周期通俗指： Vue组件 实例从创建到销毁的过程。
生命周期钩子函数：
 

 
2.6 Vue实例
每个 Vue.js 应用都是通过构造函数 Vue 创建一个 Vue 的根实例启动的。
1.	var vm = new Vue({  
2.	         // 数据、模板、挂载元素、方法、生命周期钩子  
3.	}) 
在一个应用中可以创建多个实例，但是要挂载到不同的DOM上。
（1）data数据选项：
        把一个普通 JavaScript 对象传给 Vue 实例的 data 选项，Vue 将遍历此对象所有的属性，并使用 Object.defineProperty 把这些属性全部转为 getter/setter，让data属性能响应数据变化；
        在组件中，data声明为返回一个初始数据的对象的函数，原因是组件可能被用来创建多个实例。
（2）props：数组或对象，接受父组件的数据。
（3）computed:计算属性
        模板表达式适用于简单的操作，在模板中放入太多逻辑会使模板过重且难以维护，如果需要多于一个表达式的逻辑，应使用计算属性computed。
        同method的区别：
        计算属性是基于它们的依赖进行缓存的，只有当依赖关系发生变化时，才会重新计算。这对于进行性能开销比较大的计算属性，如果有缓存，将会尽量少的执行其getter。
而method不是这样，只要发生重新渲染，method 调用总会执行该函数。
下面的计算属性将不再更新，因为 Date.now() 不是响应式依赖：（什么是响应式依赖？）
1.	computed: {  
2.	   now: function () {  
3.	         return Date.now();  
4.	      }  
5.	  }
（4）methods：方法属性
（5）watch： 监视属性
        在数据变化响应时，执行异步操作或开销较大的操作，采用watch是很有用的。
        vm.$watch(data, function(newVal, oldVal)) 当data属性改变时，触发回调函数；watch的回调函数中，this指向vm对象。
（6）el：将Vue实例挂载到已存在的一个DOM中。
         创建和挂载根实例的两种方式：当Vue实例没有el属性时，则该实例尚没有挂载到某个dom中；假如需要延迟挂载，可以在之后手动调用vm.$mount()方法来挂载。
1.	Var app = new Vue({  
2.	  el: “#app”
3.	  router
4.	})//不需要调用mount
5.	Var app = new Vue({  
6.	   router  
7.	}).$mount(‘#app’)   //通过mount把实例挂载到相应的dom中
（7）template：模板会替换挂载的元素，<template></template>中的内容可以通过id的方式传入。
（8）render：涉及前端模板的实现和原理
        目的： Render函数实现组件化，一般情况下使用 template 来创建HTML。一些HTML结构改动后要改整个template，所以如果一个经常改动HTML结构且很复杂的话，Render还是更适合，且它比 template 更接近编译器。
         createElement ({String | Object | Function} {Object} {String | Array})
        接受的第一个参数就是标签名，后面的参数都是可选的，他会根据类型来自动匹配。
        第二个参数是一个对应属性的数据对象，是一个{Object}。
        第三个参数是子节点(VNodes)，{String | Array}，如果是String的话类似于innerHTML的意思，不过这里如果里面包含了标签。
        将 h 作为 createElement 的别名是 Vue 生态系统中的一个通用惯例，实际上也是 JSX 所要求的。在vuejs中，h函数仅是作为createElement函数之缩写。
1.	render: h => h(App)   
2.	 render: function (createElement){  
3.	    return createElement(app);  
4.	} 
2.7 实例代码
   
3 基础知识点
3.1 声明式渲染
（1）采用简洁的模板语法来声明式的将数据渲染进DOM。（单向绑定）
使用文本插值、指令的方式
1.	<div id="app">  
2.	  {{ message }}  
3.	  <span v-bind:title="message">悬停几秒</span>  
4.	</div>  
5.	  
6.	var app = new Vue({  
7.	  el: '#app',  
8.	  data: {  
9.	    message: 'Hello Vue!'  
10.	  }  
11.	}) 
（2）渲染过程
        在浏览器当中，js在引擎中非常快，但是操作和更新DOM很缓慢。因此要把耗费时间的操作尽量放在计算中去做，保证最后计算出来的需要实际接触真实DOM的操作是最少的。
渲染过程：
 
模板语法：易读、易于理解，更接近文档和CSS。
Render函数/JSX：更灵活、强大，适用于复杂的逻辑。

3.2 双向数据绑定
        ViewModel 通过双向数据绑定把 View 层和 Model 层连接了起来，而View 和 Model 之间的同步工作完全是自动的，无需人为干涉，因此开发者只需关注业务逻辑，不需要手动操作DOM, 不需要关注数据状态的同步问题，复杂的数据状态维护完全由 MVVM 来统一管理。


Vue.js采用数据劫持结合发布者-订阅者模式（依赖追踪），通过Object.defineProperty()来劫持各个属性的setter，getter，同时每个组件会有一个对应的 watcher 对象，这个对象的职责就是在当前组件被渲染的时候，记录数据上面的哪些属性被用到了。在数据变动时发布消息给订阅者，触发相应的监听回调。
 
（1）使用mustache{{}}
1.	<div id=”app”>  
2.	<p>{{message}}</p>  
3.	<input type = “text”  v-model=”message”/>  // v-model实现表单输入和应用状态之间的双向绑定
4.	<div>
（2） v-bind（后跟参数、表达式）
        绑定html的属性时，不能用mustache。如绑定图片地址，用v-bind。如：v-bind:src="img"
        v-bind绑定class与style，可跟样式对象或class列表。
1.	<div v-bind:class="{ active: isActive }"></div>  
2.	<div v-bind:style="{ color: activeColor, fontSize: fontSize + 'px' }"></div> 
（3） html标签的纯文本显示／被当做html标签处理
        ① 使用两个大括号时，假如字符串内容是html标签，那么不会被转义，而是正常显示；
        ② 使用三个大括号时，字符串内的html标签会被直接转义。
1.	var vm = new Vue({    
2.	        el:"#app",    
3.	        data: {    
4.	            html:"<span>span</span>"    
5.	        }    
6.	    })   
7.	{{html}} 显示为<span>span</span>  
8.	{{{html}}} 显示为span  

3.3 指令用法
       指令的作用：用户通过具有特殊前缀的HTML属性来实现数据绑定，当表达式的值发生变化时，将某些行为应用到DOM上。
（1）v-if 根据表达式真假来删除、插入元素
（2）v-show 始终会渲染到html中，为元素设置css的style属性，display:none
（3）v-else 跟在v-if/ v-show后面
（4）v-for 基于一个数组渲染一个列表 v-for=”item in items”， 注意：v-repeat=”user: users”(不用了)
（5）v-bind 缩写为：，v-bind:argument=”expression”后跟参数、表达式
        如：<a v-bind:href="url"></a>
                <img v-bind:src="img">
（6）v-on 用于监听DOM事件，两种形式：绑定一个方法；使用内联语句。 缩写为@ 
        <button v-on:click=”greet”>greet</button>
        <button v-on:click=”say(‘Hi’)”>Hi</button>
         在使用v-for列表循环时，onclick加载的数据是for循环中的最后一条数据，因此要用v-on:click； 而不是onclick。类似于在Angular中要用ng-click。
1.	<div v-for = "(item,index) in contacts" v-on:click="showDetail(item.userId)>  
2.	    {{item.name}}  
3.	<div>
3.4 过滤器
        可用在两个地方：mustache 插值和 v-bind 表达式         
        {{ message | filterA 'arg1' arg2 }}
        第一个参数，固定为表达式的值（被过滤目标）；第二个参数，过滤器后面的第一个单词；第三个参数，过滤器后面的第二个单词，依次类推。参数加引号则视为字符串，参数不加引号则视为表达式，表达式的值作为参数传递给过滤器。
3.5 事件处理器
（1）监听事件：v-on监听DOM事件
<button v-on:click="counter += 1">增加 1</button> 
（2）方法事件处理器：v-on 可以接受一个定义的方法来调用
<button v-on:click="greet">Greet</button> 
（3）内联处理器方法
<button v-on:click="say('hi')">Say hi</button> 
3.6 实例代码
   
4 路由
4.1 实现原理
采用vue-router实现，vue-router是vue的官方路由插件，路径之间的切换，也是组件的切换。
步骤：

（1）定义vue组件
        const Home = { template: '<div>home</div>' } 
（2）定义路由
Var  routes  =  [{path:’/home’, component: Home}]  
（3）创建router实例，并将定义的路由传入
1.	Var router = new VueRouter({  
2.	    routes:routes  
3.	}) 
Router构造配置
Routes: [
Path:
Component:
Name: (命名路由)
Components（命名视图组件）
Redirect
Alias
Children（子路由）
BeforeEnter
Meta
]
mode配置路由模式：“hash" | "history" | "abstract"；
hash：使用 URL hash 值来作路由，默认模式；支持所有浏览器，包括不支持 HTML5 History Api 的浏览器。
history：依赖 HTML5 History API 和服务器配置。
abstract：支持所有javascript运行环境，如 Node.js 服务器端。如果发现没有浏览器的 API，路由会自动强制进入这个模式。
base：基路径，默认”/”
linkActiveClass 默认值: "router-link-active"
scrollBehavior 滚动行为

4.2 命名路由
通过一个名称来标识一个路由。
<router-link :to="{ name: 'user', params: { userId: 123 }}">User</router-link> 
1.	const router = new VueRouter({  
2.	  routes: [  
3.	    {  
4.	      path: '/user/:userId',  
5.	      name: 'user',  
6.	      component: User  
7.	    }  
8.	  ]  
9.	}) 
4.3 动态路由
把某种模式匹配到的所有路由，全都映射到同个组件。
（1）Html
1.	<router-link to="/user/foo">/user/foo</router-link>  
2.	<router-link to="/user/bar">/user/bar</router-link> 
（2）Js
传递参数：需要在路径的参数中设置要传递的参数，可以传递多个参数，然后通过{{$route.params.参数}}使用
1.	const User = {  
2.	  template: `<div>User {{ $route.params.id }}</div>`  
3.	}  
4.	const router = new VueRouter({  
5.	  routes: [  
6.	    { path: '/user/:id', component: User }  
7.	  ]  
8.	}) 
            <template></template>中的内容还可以通过id的方式传入，有两种方式。
              方式一：
1.	<template id="newsDetail">  
2.	    <div>  
3.	        News Detail - {{$route.params.id}}
4.	    </div>  
5.	</template>  
6.	const User = {  
7.	  template: ‘#newsDetail’</div>  8.	} 
         方式二：
1.	<script type="text/x-template" id="myComponent">  
2.	     <div>This is a component!</div>  
3.	</script> 
4.4 嵌套路由
      要在嵌套的出口中渲染组件，需要在 VueRouter 的参数中使用 children 配置：
1.	const router = new VueRouter({  
2.	  routes: [  
3.	    { path: '/user/:id', component: User,  
4.	      children: [  
5.	        {  
6.	          // 当 /user/:id/profile 匹配成功，UserProfile 会被渲染在 User 的 <router-view> 中  
7.	          path: 'profile',  
8.	          component: UserProfile  
9.	        },   
10.	        {  
11.	          // 当 /user/:id/posts 匹配成功，UserPosts 会被渲染在 User 的 <router-view> 中  
12.	          path: 'posts',  
13.	          component: UserPosts  
14.	        }  
15.	      ]  
16.	    }  
17.	  ]  18.	}) 
4.5 路由导航
（1）使用 <router-link> 创建 a 标签
（2）Router的实例方法（通过编程的方式实现）
        想要导航到不同的 URL，则使用 router.push 方法。这个方法会向 history 栈添加一个新的记录，所以，当用户点击浏览器后退按钮时，则回到之前的 URL。
        router.push(字符串或对象)：向history 栈添加一个新的记录 
        router.replace(location)：替换掉当前的 history 记录
        router.go(n)：在 history 记录中向前或者后退多少步
        两种方式等效
声明式		编程式
<router-link :to="...">	router.push(...)
<router-link :to="..." replace>		router.replace(...)
4.6 keep-alive
keep-alive 是Vue的内置的一个组件，可以使被包含的组件保留状态，或避免重新渲染。
（1）属性：include匹配的组件会缓存； exclude匹配的组件不会被缓存
1.	<keep-alive>  
2.	    <router-view>  
3.	        <!-- 所有路径匹配到的视图组件都会被缓存！ -->  
4.	    </router-view>  
5.	</keep-alive> 
（2）router.meta 属性：
1.	export default [  
2.	  {  
3.	    path: '/',  
4.	    name: 'home',  
5.	    component: Home,  
6.	    meta: {  
7.	      keepAlive: true // 需要被缓存，flase不需要缓存
8.	    }  
9.	  },  
10.	] 
4.7 实例代码
 
5 组件
5.1 核心目标
        目标：把UI结构映射到恰当的组件树，扩展HTML元素，封装可重用代码。
        突出特点：跨组件数据流，自定义事件通信以及构建工具集成。
5.2 预定义项
        组件可以预定义很多选项，核心的几个：
（1）模板（template）：模板声明了数据和最终展现给用户的DOM之间的映射关系。
（2）初始数据（data）：一个组件的初始数据状态。对于可复用的组件来说，通常是私有的状态。
（3）接受的外部参数(props)：组件之间通过参数来进行数据的传递和共享。参数默认是单向绑定（由上至下），但也可以显式地声明为双向绑定。
（4）方法（methods）：对数据的改动操作一般都在组件的方法内进行。可以通过v-on指令将用户输入事件和组件方法进行绑定。
（5）生命周期钩子函数（lifecycle hooks）：一个组件会触发多个生命周期钩子函数，比如created，attached，destroyed等等。在这些钩子函数中，我们可以封装一些自定义的逻辑。和传统的MVC相比，可以理解为 Controller的逻辑被分散到了这些钩子函数中。
（6）私有资源（assets）：Vue.js当中将用户自定义的指令、过滤器、组件等统称为资源。由于全局注册资源容易导致命名冲突，一个组件可以声明自己的私有资源。私有资源只有该组件和它的子组件可以调用。
         单文件组件：把组件代码按照template、style、script的拆分方式，放置到对应的 .vue 文件中。
5.3 组件创建
（1）步骤：调用Vue.extend()创建组件构造器；调用Vue.component()注册组件；在Vue实例作用范围内使用组件。
1.	<!DOCTYPE html>  
2.	<html>  
3.	    <body>  
4.	        <div id="app">  
5.	            <!-- 3. #app是Vue实例挂载的元素，应该在挂载元素范围内使用组件-->  
6.	            <my-component></my-component>  
7.	        </div>  
8.	    </body>  
9.	    <script src="js/vue.js"></script>  
10.	    <script>  
11.	        // 1.创建一个组件构造器  
12.	        var myComponent = Vue.extend({  
13.	            template: '<div>This is my first component!</div>'  
14.	        })  
15.	          
16.	        // 2.注册组件，并指定组件的标签，组件的HTML标签为<my-component>  
17.	        Vue.component('my-component', myComponent)  
18.	          
19.	        new Vue({  
20.	            el: '#app'  
21.	        });  
22.	    </script>  
23.	</html>
组件注册语法糖，因上述方式有点繁琐，提供了语法糖。
语法糖概念：是一种便捷的写法，编译器会帮我们转换，且提高开发编码的效率。
1.	Vue.component('my-component',{  
2.	    template: '<div>This is the first component!</div>'  
3.	})  
4.	var vm1 = new Vue({  
5.	    el: '#app1'  
6.	}) 
（2）局部注册组件：上述例子中组件可以在任何Vue实例中使用，下面在实例选项components注册。
1.	new Vue({ 
2.	    el:’#app’, //将组件注册在Vue实例下
3.	        components: {  
4.	                'my-component': Child  
5.	      }  
6.	}) 
5.4 父-子组件通信
由于组件实例的作用域是相互独立的，不能且不应该在子组件的模板内引用父组件的数据。使用props把数据传给子组件。
父子之间通信： 父->子：props；子-父：events
 
1.	<!DOCTYPE html>  
2.	<html>  
3.	    <body>  
4.	        <div id="app">  
5.	            <parent-component>  
6.	            </parent-component>  
7.	        </div>  
8.	    </body>  
9.	    <script src="js/vue.js"></script>  
10.	    <script>  
11.	       var Child = Vue.extend({  
12.	            template: '<p>This is a child component!</p>'  
13.	        })  
14.	          
15.	        var Parent = Vue.extend({  
16.	            // 在Parent组件内使用<child-component>标签  
17.	            template :'<p>This is a Parent component</p><child-component></child-component>',  
18.	            components: {  
19.	                // 局部注册Child组件，该组件只能在Parent组件内使用  
20.	                'child-component': Child  
21.	            }  
22.	        })  
23.	          
24.	        // 全局注册Parent组件  
25.	        Vue.component('parent-component', Parent)  
26.	        new Vue({  
27.	            el: '#app'  
28.	        })  
29.	          
30.	    </script>  
31.	</html>
props示例
1.	<template id="myComponent">  
2.	    <table>  
3.	        <tr>  
4.	            <th colspan="2">  
5.	                子组件数据  
6.	            </th>  
7.	        </tr>  
8.	        <tr>  
9.	            <td>my name</td>  
10.	            <td>{{ myName }}</td>  
11.	        </tr>  
12.	        <tr>  
13.	            <td>my age</td>  
14.	            <td>{{ myAge }}</td>  
15.	        </tr>  
16.	    </table>  
17.	</template>  
18.	var vm = new Vue({  
19.	    el: '#app',  
20.	    data: {  
21.	        name: 'keepfool',  
22.	        age: 28  
23.	    }, 
24.	    components: { 
25.	        'my-component': { 
26.	            template: '#myComponent', 
27.	            props: ['myName', 'myAge'] 
28.	        } 
29.	    } 30.	}) 
（1）将父组件数据通过已定义好的props属性传递给子组件：
1.	<div id="app">  
2.	    <my-component v-bind:my-name="name" v-bind:my-age="age"></my-component>  
3.	<child-component v-bind:子组件prop="父组件数据属性"></child-component>
4.	</div> 
（2）双向绑定，使用.sync关键字，子组件的数据修改会传给父组件。
<my-component v-bind:my-name.sync="name" v-bind:my-age.sync="age"></my-component>
（3）单次绑定.once，单次绑定在建立之后不会同步之后的变化，这意味着即使父组件修改了数据，也不会传导给子组件。
<my-component v-bind:my-name.once="name" v-bind:my-age.once="age"></my-component>
（4）Vue实例的事件接口
1.	$on(eventName) 监听事件  
2.	$emit(eventName) 触发事件
（5）非父子组件之间的通信
1.	var bus = new Vue()  
2.	// 触发组件 A 中的事件  
3.	bus.$emit('id-selected', 1)  
4.	// 在组件 B 创建的钩子中监听事件  
5.	bus.$on('id-selected', function (id) {  
6.	  //    }) 
5.5 实例代码
 
6 自定义指令
6.1 指令和组件的区别
        指令只封装 DOM 操作，而组件代表一个自给自足的独立单元 —— 有自己的视图和数据逻辑。
6.2 指令的定义
        自定义指令是对纯DOM进行底层操作。
1.	Vue.directive(id,definition);//全局定义  
2.	var vm = new Vue({ //局部定义  
3.	      directives:{  
4.	      }  
5.	}) 
6.3 指令定义提供的几个钩子函数
        bind inserted update componentUpdate unbind
7 工程构建 
（简单的了解）
（1）vue的官方构建工具：vue-cli
        npm+webpack：nmp安装vue，webpack模块加载器兼打包工具：能将多个模块打包成最终应用。
        优点：部分引用组件，压缩、打包，更方便。
（2）独立构建、运行时构建
        独立构建包含模板编译器并支持 template 选项。 它也依赖于浏览器的接口的存在，所以不能用来为服务 器端渲染。
        运行时构建不包含模板编译器，因此不支持 template 选项，只能用 render 选项，若使用运行时构建，在单文件组件中也可以写模板，因为单文件组件的模板会在构建时预编译为 render 函数。
8 参考资料
https://cn.vuejs.org/v2/guide/         Vue官网
https://cn.vuejs.org/v2/api/#全局配置   Vue API
http://router.vuejs.org/zh-cn/  Vue-Router
https://mattstauffer.co/blog/getting-started-using-vues-vue-router-for-single-page-apps vue-router
http://mp.weixin.qq.com/s?__biz=MzIwNjQwMzUwMQ==&mid=2247484393&idx=1&sn=142b8e37dfc94de07be211607e468030&chksm=9723612ba054e83db6622a891287af119bb63708f1b7a09aed9149d846c9428ad5abbb822294&mpshare=1&scene=1&srcid=1026oUz3521V74ua0uwTcIWa&from=groupmessage&isappinstalled=0#wechat_redirect&utm_source=tuicool&utm_medium=referral 尤雨溪：Vue2.0渐进式前端解决方案
http://mp.weixin.qq.com/s?__biz=MzIwNjQwMzUwMQ==&mid=2247484329&idx=1&sn=f79da7c92cda7352c8a651f459ef4172&chksm=9723616ba054e87df94522a9c67de26c9ac1f2532198506f47f9c589070d4c530a66ed37dd70&scene=21#wechat_redirect  更轻更快的Vue.js 2.0与其他框架对比
http://www.cnblogs.com/rik28/p/6024425.html    入门教程blog
http://blog.cgsdream.org/2016/11/23/vue-source-analysis-3/ render函数
http://blog.csdn.net/xingjigongsi/article/details/54602404 vue组件介绍
http://3ms.huawei.com/hi/blog/921249_2569925.html   父子组件通信
9 学习心得
（1）学习每个知识点，理解与学会一直都会有一段距离，通过动手会把这个差距拉小。
（2）无论在学习的任何一个阶段，头脑中都应该有个当前的知识架构体系，当学习了新知识的会更新该知识树，这棵树的架构会随你对知识的认识而不断调整，也会更加枝繁叶茂。
（3）多沟通，多请教，多和业务联系起来。

